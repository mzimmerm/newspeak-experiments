Newspeak3
'Root'
class AABraveNewWorldExplorer usingPlatform: platform andUtilitiesClass: utilitiesClass 
  (* :exemplar: AABraveNewWorldExplorer usingPlatform: platform andUtilitiesClass: AAUtilities. *)
  = (
	(* Modified example from: https://newspeaklanguage.org/ns101/ns101.html *)
	|
	private Presenter = platform hopscotch core Presenter.
	private Subject = platform hopscotch core Subject.
    private List = platform collections List.
    
    (* import graphics *)
    private Color = platform graphics Color.
    
    (* import utilities *)
    (* private utilities = (ide namespacing manifest AAUtilities) usingPlatform: platform. *)
    private utilities = utilitiesClass usingPlatform: platform.
    private files = utilities Files new.
    private filesMock = utilities FilesMock using: files FilesystemBase.
    private FilePath = files FilePath.
    private FilesystemMock = filesMock FilesystemMock.
	(* single instance of filesystemMock. All FilePath creations are delegated to it *)
	private filesystemMock = FilesystemMock usingUtilityFiles: files.

    (* private webFiles = ide webFiles. private WebFilesFolder = webFiles Folder. *)
	|
) (
public class FileSubject onModel: m <String> = Subject onModel: m (
|public initiallyExpanded <Boolean> ::= false.|
) (
public isMyKind: other = (
	^ other isKindOfFileSubject.
)
public fullFilePath ^ <String> = (
    ^ model.
)
public createPresenter ^ <Presenter> = (
	^ FilePresenter onSubject: self.
    )
public isDirectory ^<Boolean> = (
	(* Note that fullFilePath just answers model - the full file name *)
	^(FilePath for: fullFilePath inFilesystem: filesystemMock) isDirectory
)
public localFileName ^ <String> = (
	(* Answer basename: the last portion of the fullFilePath=model string *)
	^(FilePath for: fullFilePath inFilesystem: filesystemMock) simpleName.
)
public contents ^ <Collection[FileSubject]> = (
	(* Answer the contents of this FileSubject: a collection of this FileSubject children *)
    ^isDirectory
    	ifTrue: [|thisDirectory|
        	thisDirectory: (FilePath for: fullFilePath inFilesystem: filesystemMock). (* FilePath for this FileSubject full name=fullFilePath *)
            thisDirectory entries collect:
            	[:childPath <FilePath> | FileSubject onModel: childPath fullFilePath]. (* todo-00 was: name *)
        ]
        ifFalse: [
        	List new.
        ]
)
public printString ^ <String> = (
			^ 'FileSubject :: isDirectory=', isDirectory printString, ' : localFileName=', localFileName.
        )
public = x ^ <Boolean> = (
	(* Equality override. FileSubjects are = if they have same model=fullFilePath, 
        and are initially expanded the same way.
    *)
    ^ x isKindOfFileSubject and: [
    		x fullFilePath = fullFilePath and: [x initiallyExpanded = initiallyExpanded]
        ].
)
public hash ^ <Integer> = (
	^ class hash bitXor: model hash.
)
public isKindOfFileSubject ^ <Boolean> = (
	^ true.
)
public title ^ <String> = (
	^ fullFilePath.
    )
) : (
)
public class FilePresenter onSubject: subject = Presenter onSubject: subject (
	|
    (* Width of the image representing the 'collapseIcon' and 'expandIcon' > and v.
    	Leaf file presenters will be shifted to the right by blank: dirCollapserWidth
        so that sibling dirs (which have the > or v image) and files (which do not have the image) do line up.
    *)
    dirCollapserWidth = 10.
    |
) (
public isMyKind: other = (
	^ other isKindOfFilePresenter.
)
public isKindOfFilePresenter = (
	^ true.
)
bar: def <Fragment> ^ <Fragment> = (
	(* Answers a padder created around the passed fragment *)
	^ (column: {
    		blank: 4. (* width 4 *)
        	row: {
        		blank: 4.
            	elastic: def.
            	blank: 4.
        	}.
        	blank: 2.
        }) color: (Color gray: 0.5). (* gray background on column *)
)
filePresentationCore ^ <Fragment> = (
	(*
	('subject=', subject printString) out.
    ( 'subject localFileName=', subject localFileName) out.
    *)
	^ label: subject localFileName
)
public definition ^<Fragment> = (
    ^ subject isDirectory
    	ifTrue: [directoryPresentation]
        ifFalse: [filePresentation]
)
directoryContentsPresenters ^ <Collection[FilePresenter]> = (
	(* Answer list of presenters, one for each childEntry in directory.
		Each childEntry presenter is a new instance of FilePresenter,
        answered by the childEntry's FileSubject createPresenter. 
        The childEntry's FileSubject model is the file or dir name of the directory child.
    *)
	^subject contents collect: [ :childFileSubject | childFileSubject presenter ].
)
directoryPresentationOld ^ <Fragment> = (
	|dirAndContentsPresentation|
    (* Present directory as file, followed by contents. *)
    dirAndContentsPresentation:: List new add: filePresentation; addAll: directoryContentsPresenters.
    
	^ collapsed: [filePresentation] (* show collapsed directory as label: name, padded in a bar *)
    expanded: [column: dirAndContentsPresentation] (* show expanded directory as list of label: childFileName *)
    initiallyExpanded: false.
    
)
filePresentation ^ <Fragment> = (
	(* For a directory, show padder around label with file name; 
        for a file, show the same padder but pad the label with file name more -
        by dirCollapserWidth, so subdirectory and subfile name line up on the left. *)
	^ subject isDirectory
    	ifTrue: [bar: filePresentationCore]
        ifFalse: [elastic: (bar: (row: { blank: dirCollapserWidth. filePresentationCore }))]
)
openOnNewPage = (
	(* Create a new FileSubject on this presenter's model (the file with link we clicked on), 
        then initially expand the new FileSubject, 
        then enter the new FileSubject.
        Entering the new FileSubject will make it the HopscotchWindow's subject,
        instead of the original top level FileSubject, '/home/user'.
    *)
        
	enterSubject:: (FileSubject onModel: subject fullFilePath) initiallyExpanded: true.
)
directoryPresentation ^ <Fragment> = (
	|dirAndContentsPresentation|
    (* Present directory as file, followed by contents in column under the file anme. *)
    dirAndContentsPresentation:: List new add: filePresentation; addAll: directoryContentsPresenters.
    
    (* If collapsed (default), present a localFileName as a link; 
        	clicking the link opens this presenter' ~subject fullFilePath~ in a new page 
            by means of 
            - this FilePresenter calling ~openOnNewPage~, which:
            - creates a new ~FileSubject onModel: subject FullFilePath~, 
              and calls enterSubject on this presenter subject's fullFilePath.
            Such enterSubject: newSubject thisFullFilePath causes the previous HopscotchWindow
            be replaced with the presenter on the new subject.
    	If expanded, present  ( in the current HopscotchWindow),
        dirAndContentsPresentation - a localFileName, followed by entries.
    *)
	^ collapsed: [link: subject localFileName action: [openOnNewPage] ]
    expanded: [column: dirAndContentsPresentation] 
    initiallyExpanded: subject initiallyExpanded.
    
)
helpText ^<AmpleforthFragment> = (
	(* todo: this does not seem to be on the ? on the application. Place it there. *)
	|mapping = Map new.|
    mapping
    	at: #fileBrowserClose put: closeHelp.
    ^ ampleforth: '
    <b>Sample file browser</b>
    '
    mapping: mapping.
)
) : (
)
public runInWorkspaceOnPlatform: platform ide: ide = (

|explorer subject tmpFolder|
explorer:: AABraveNewWorldExplorer usingPlatform: platform ide: ide.
subject:: explorer FileSubject onModel: 'file:///home/mzimmermann/tmp'.
hopscotch core HopscotchWindow openSubject: subject.

platform js global at: 'JSZip'. (* *)
tmpFolder:: ide webFiles Folder named: 'tmp'.
tmpFolder name.
tmpFolder.

tmpFolder addTextFile: 'dummy1.txt' contents: 'A dummy file'.
(* both private: tmpFolder directory. tmpFolder innerDirectory. *)
tmpFolder save. (* offers to save in servable top level file named tmp.zip with dummy1.txt inside. *)



(*
hopscotch core = hopscotch.
hopscotch HopscotchWindow
*)
)
) : (
)
