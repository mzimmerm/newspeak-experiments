
* AAUtilities structure

- AAUtilities
  - Files
    - y FilePathBase
    - y FilesystemBase
    - y FilePath (passed FilesystemMock but only needs API of FilesystemBase. everything is public to adapt to the demo, but many things should not be) 
  - FilesMock    
    - y FilesystemMock (must newly import FilePath)


* 1.  Top Workspace Non-UI: Get files on level 1.

#+name: workspace-top
#+begin_example
|
root level1Entries level1FullPaths
private utilities = (ide namespacing manifest AAUtilities) usingPlatform: platform.
private files = utilities Files new.
private filesMock = utilities FilesMock using: files FilesystemBase.
private FilePath = files FilePath.
private FilesystemMock = filesMock FilesystemMock.
(* single instance of filesystemMock. All FilePath creations are delegated to it *)
private filesystemMock = FilesystemMock usingUtilityFiles: files.
|

root:: FilePath for: '/home/user/' inFilesystem: filesystemMock.
level1Entries:: root entries.
level1FullPaths:: level1Entries collect: [:filePath | (filePath fullFilePath)].
#+end_example


* 2. Top Workspace UI : Run Explorer UI: In HopscotchWindow openSubject: AABraveNewWorldExplorer FileSubject

#+begin_example
|explorer| 
explorer:: AABraveNewWorldExplorer usingPlatform: platform ide: ide.
hopscotch core HopscotchWindow openSubject: ((explorer FileSubject) onModel: '/home/user/').
#+end_example

Evaluating it shows two things:

- result of evaluation: instance of HopscotchWindow (with slots)
- The HopscotchWindow bar (clock, home, reload, help) with a single label (/home/user/) apprended from FilePresenter#define


[[file:img/Notes.org-explorer-1.png]]


public createPresenter ^ <Presenter> = (
	^FilePresenter onSubject: self.
    )
