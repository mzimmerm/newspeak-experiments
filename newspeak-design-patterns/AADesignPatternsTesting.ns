Newspeak3
'Root'
class AADesignPatternsTesting usingPlatform: platform testFramework: minitest testedClassesMap: testedClassesMap <Map>
	(* :exemplar:  AADesignPatternsTesting usingPlatform: platform testFramework: ide minitest testedClassesMap: (Map new at: #AAModuleUsingSingleton put: AAModuleUsingSingleton new; yourself) *)
	= (
	|    
    (* import base class of inner Test classes *)
	private TestContext = minitest TestContext.

	(* import message and not understood *)
	private Message = platform kernel Message.
	private MessageNotUnderstood = platform kernel MessageNotUnderstood.
    
    (* import misc classes used in inner Test classes *)
	private StringBuilder = platform kernel StringBuilder.
	private Map = platform collections Map.
    
    (* slots *)
    (* This slot should collect all tested classes imported from manifest and passed here
        when this instance is created in ~TestingConfiguration#packageTestsUsing: manifest~.
        This is needed if we want to keep ~public class SingletonTests = TestContext~ simple
        with only new (rather than packaging it ... somehow).
    *)
    private testedClassesMap = testedClassesMap.
	|
) (
public class SingletonTests = TestContext (
	(* Class holds testing methods for Singleton*)
    |
    (* Tested class holds the singleton instance on slot. 
        Flows from from manifest, to Configuration, to testedClassesMap top class slot 
     *)
    AAModuleUsingSingleton = testedClassesMap at: #AAModuleUsingSingleton.
    aaModuleUsingSingleton = AAModuleUsingSingleton new.
    |
) (
public testCreateSingletonTwiceAgain = (
	|first second|
     (* The 2 lines below call and return result of ~AASingleton getInstance~ *)
    first::  aaModuleUsingSingleton client1OfSingleton.
    second::  aaModuleUsingSingleton client3OfSingletonUsedInNested.
    
    assert: first = second.
)
public testCreateSingletonTwiceBREAKING_SINGLETON = (
	|first second|
     (* The first line below call and return result of ~AASingleton getInstance~,
        the second line creates ~AASingleton new~ 
     *)
    first::  aaModuleUsingSingleton client1OfSingleton.
    second::  aaModuleUsingSingleton client4OfSingletonBreakingSingleton.
    
    assert: first = second.
)
public testCreateSingletonTwice = (
	|first second|
     (* The 2 lines below call and return result of ~AASingleton getInstance~ *)
    first::  aaModuleUsingSingleton client1OfSingleton.
    second::  aaModuleUsingSingleton client2OfSingleton.
    
    assert: first = second.
)
) : (
TEST_CONTEXT = ()
)
public class TestSubjects = (
	(* Holds a bunch of inner classes which we test against *)
    (* todo-00 : add a newly created AnotherSingleton and test against it *)
) (
) : (
)
) : (
)
