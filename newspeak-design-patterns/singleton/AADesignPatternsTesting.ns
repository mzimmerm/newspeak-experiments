Newspeak3
'Root'
class AADesignPatternsTesting usingPlatform: platform testFramework: minitest testedClassesMap: testedClassesMap <Map>
	(* :NOexemplar:  AADesignPatternsTesting usingPlatform: platform testFramework: ide minitest testedClassesMap: (Map new at: #AAModuleUsingSingleton put: AAModuleUsingSingleton new; yourself) *)
    (* Ironically, presence of the exemplar above triggers out errors related to missing exemplars on AASingleton, but any attempts to add them fail. *)
	= (
	|    
    (* import base class of inner Test classes *)
	private TestContext = minitest TestContext.

	(* import message and not understood *)
	private Message = platform kernel Message.
	private MessageNotUnderstood = platform kernel MessageNotUnderstood.
    private Exception = platform kernel Exception.
    
    (* import misc classes used in inner Tests classes *)
	private StringBuilder = platform kernel StringBuilder.
	private Map = platform collections Map.
    
    (* slots *)
    (* This slot should collect all tested classes imported from manifest and passed here
        when this instance is created in ~TestingConfiguration#packageTestsUsing: manifest~.
        This is needed if we want to keep ~public class SingletonTests = TestContext~ simple
        with only new (rather than packaging it ... somehow).
    *)
    private testedClassesMap = testedClassesMap.
	|
) (
public class SingletonTests (* :exemplar: SingletonTests new *) = TestContext (
	(* Class holds testing methods for Singleton*)
    |
    (* Tested class holds the singleton instance on slot. 
        Flows from from manifest, to Configuration, to testedClassesMap top class slot 
     *)
    AAModuleUsingSingleton = testedClassesMap at: #AAModuleUsingSingleton.
    aaModuleUsingSingleton = AAModuleUsingSingleton new.
    |
) (
public testCreateSingletonTwice = (
	|first second|
     (* The 2 lines below call and return result of ~AASingleton getInstance~ *)
    first::  aaModuleUsingSingleton client1OfSingleton.
    second::  aaModuleUsingSingleton client2OfSingleton.
    
    assert: first = second.
)
public testCreateSingletonTwiceIncludingFromNested = (
	|first second|
     (* The 2 lines below call and return result of ~AASingleton getInstance~ *)
    first::  aaModuleUsingSingleton client1OfSingleton.
    second::  aaModuleUsingSingleton client3OfSingletonUsedInNested.
    
    assert: first = second.
)
public testCreateSingletonUsingNew = (
	|singletonCreatedUsingNew singletonUsingGetInstance|
     (* It is legal, although not recommended, that the first creation of singleton uses new. *)
    singletonCreatedUsingNew::  aaModuleUsingSingleton client4OfSingletonCreatedUsingNew.
    singletonUsingGetInstance::  aaModuleUsingSingleton client1OfSingleton.
    
     (* Instance using ~new~ should be the same as using getInstance. *)
    assert: singletonCreatedUsingNew = singletonUsingGetInstance.
    
    (* However, second invocation of singleton ~new~ should fail. *)
    should: [aaModuleUsingSingleton client4OfSingletonCreatedUsingNew] signal: Exception. 
)
) : (
TEST_CONTEXT (* :exemplar: SingletonTests TEST_CONTEXT *) = ()
)
public class TestSubjects = (
	(* Holds a bunch of inner classes which we test against *)
    (* todo-00 : add a newly created AnotherSingleton and test against it *)
) (
) : (
)
) : (
)
