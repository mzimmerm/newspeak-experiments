Newspeak3
'Root'
class AAModuleUsingSingleton (* :exemplar: AAModuleUsingSingleton new *) = (
	(* Sample module which declares and uses a singleton AASingleton. *)
	|
    (* Holder of the singleton instance for this module. 
    	Anywhere in code in this module, ~modulesSingletonInstance~ can be referenced
    *)
	private modulesSingletonInstance <AASingleton>
	|
) (
private class AASingleton new = (
	(*
    The singleton class is declared nested in and used by ~AAModuleUsingSingleton~.
    The instance is held on the outer's slot  ~AAModuleUsingSingleton#modulesSingletonInstance~.
    
    Problem: Making this ~new~ primary factory private does NOT prevent code in the outer
    ~AAModuleUsingSingleton~ from calling ~AASingleton new~ all over again, because code in 
    class ~AAModuleUsingSingleton~ has access to all it's members 
    (including nested class AASingleton new).
    
    Solution: We  signal Error if instance was already set (by calling ~new~ or ~getInstance~!).
    *)
 	|
  	private payload
  	|
    modulesSingletonInstance isNil ifFalse: [Error signal.].
    modulesSingletonInstance: self.
) (
public stateChange: payload = (
	(* Sets the payload that may be carried by this singleton. *)
	self payload: payload.
)
) : (
public getInstance ^<AASingleton> (* :exemplar: AASingleton getInstance *) = (
	(* Gets instance of singleton, and stores in on top level module's 
    	slot ~AAModuleUsingSingleton#modulesSingletonInstance~.
    *)    
	modulesSingletonInstance = nil
	ifTrue: [
		modulesSingletonInstance: AASingleton new.
	].
	^ modulesSingletonInstance.
   )
)
class NestedUsingSingleton = (
	|
    (* public getInstance is accessible here, but ~AASingleton new~ 
        would NOT be (good, we cannot make a mistake). 
    *)
	public nestedClassSlotWithSingletonInstance = AASingleton getInstance.
	|
) (
) : (
)
public client1OfSingleton ^ <AASingleton> = (
	(* Client that needs a singleton. 
    	For testing AASingleton, gets and returns the singleton instance.
    *)
    |gotInstance|
    gotInstance:: AASingleton getInstance.
    ^ gotInstance.
)
public client2OfSingleton ^ <AASingleton> = (
	(* Another client that needs a singleton. 
    	For testing AASingleton, gets and returns the singleton instance.
    *)
    |gotInstance|
    gotInstance:: AASingleton getInstance.
    ^ gotInstance.
)
public client3OfSingletonUsedInNested = (
	^ NestedUsingSingleton new nestedClassSlotWithSingletonInstance.
)
public client4OfSingletonCreatedUsingNew = (
	(* Attempt to create ~AASingleton new~ should only work once,  
        then ~Error signal~ on subsequent creation. See  ~AASingleton new~.
    *)
    modulesSingletonInstance = AASingleton new.
    ^ modulesSingletonInstance.
)
) : (
)
