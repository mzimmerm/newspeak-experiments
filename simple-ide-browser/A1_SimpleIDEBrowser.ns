Newspeak3
'Root'
class A1_SimpleIDEBrowser usingPlatform: platform <Platform> webIDE: ide <HopscotchWebIDE> 
  (* :exemplar:  A1_SimpleIDEBrowser usingPlatform: platform webIDE: ide. *)
  = (
	|
    (* imports *)
    List = platform collections List.    
    Map = platform collections Map.    
	ClassMirror = platform mirrors ClassMirror.
    ObjectMirror = platform mirrors ObjectMirror.
	Exception = platform kernel Exception.
    Color = platform graphics Color.
    

	Presenter = platform hopscotch Presenter.
    Subject = platform hopscotch Subject.
    
    (* cheating imports of full classes from ide browsing instead of reimplementing them *)
	ProgrammingPresenter = ide browsing ProgrammingPresenter.
    ProgrammingSubject =  ide browsing ProgrammingSubject.
    DefinitionListPresenter = ide browsing DefinitionListPresenter.


    (* slots *)
    ide = ide.
    classUIs <List[ClassUI]> (* todo : should this be ClassGroup? *)
    
    (* Style *)    
	styleHeaderPadRight <Float> = 0.0.
    styleButtonSize <Float> = 30.
    
	|
  ) (
public class ClassUI forClassDefinedBy: classOrClassDeclarationMirror <Behavior|ClassDeclarationMirror> = (
    (* Simple UI for presenting a Class with members: slots, nested classes, methods. 
    	Holds two types of slots:
          1. model-defining slots for instances of enclosed 
              <ClassModel>, <FactoryUI>, <NestedClassGroupUI>,  <MethodGroupUI>
          2. slots of those instances.
    *)
  	|
    (* indented UIs instances must be first, the ClassSubject creation needs them! *)
	factoryUI <FactoryUI> (* todo : this seems replaced with headingDefinition *)
    (* todo: finish: nestedClassesUIs <List[ClassUI]> ::= nestedClassDeclarationMirrors collect: [:nestedClassDeclarationMirror | ClassUI forClass: nestedClassDeclarationMirror klass]. *)
    nestedClassGroupUI <NestedClassGroupUI> = NestedClassGroupUI new.
    instanceMethodGroupUI <MethodGroupUI>
    classMethodGroupUI <MethodGroupUI>    


    (* Model defining slot for <ClassModel>. public for accesibility to pass to nested ClassModel factory *)
    public classDeclarationMirror = classOrClassDeclarationMirror isKindOfClass 
    	ifTrue: [(ClassMirror reflecting: classOrClassDeclarationMirror) mixin declaration]
        ifFalse: [
        	classOrClassMirror isKindOfClassDeclarationMirror
            	ifTrue: [classOrClassDeclarationMirror]
                ifFalse: [break. Exception signal: 'Perhaps trying to pass aClassMirror? Pass aClassMirror declaration <ClassDeclarationMirror> instead.']
        ].
  
	(* members used by multiple models in UI and it's nested classes *)
    
    (* instanceSide returns MixinMirror, which has API similar to ClassMirror, can get slots, nestedClasses, methods from it. *)
    (* Model defining slot for <NestedClassGroupModel> *)
    public nestedClassesGroup <MirrorGroup[ClassDeclarationMirror]> =  classDeclarationMirror instanceSide nestedClasses.
    (* Model defining slot for <MethodGroupModel> *)
    public nestedClassDeclarationMirrors ::= nestedClassesGroup do: [:nestedClassDeclarationMirror | nestedClassDeclarationMirror].

	|
    ) (
public class EntryPresenter onSubject: s = ProgrammingPresenter onSubject: s () (
public collapse = (
	substance collapse
)
definition = (
	^collapsed: [collapsedDefinition] expanded: [expandedDefinition]
)
public expand = (
	substance expand
)
public isKindOfEntryPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfEntryPresenter
)
row1: row1 row2: row2 = (
	^row: {
		(row: row1) width: 0 elasticity: 1.
		(row: {mediumBlank}, row2) width: 0 elasticity: 2.
	}
)
) : (
)
class ClassEntryPresenter onSubject: s <ClassSubject> = EntryPresenter onSubject: s () (
classCommentSummary ^ <String> = (
	|
	fullComment <String> = subject classCommentText.
	endOfFirstSentence <Integer> = fullComment indexOf: '.'.
	firstSentence <String> = fullComment copyFrom: 1 to: endOfFirstSentence.
	|
	^firstSentence
)
entryActionsMenu = (
	^nothing
)
expandedDefinition = (
	^subject presenter
)
public tag ^ <String> = (
  ^subject name
)
public isKindOfClassEntryPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfClassEntryPresenter
)
collapsedDefinition = (
	^row1: {
        defaultBlank.
		(image: ide images classIcon)
            height: styleButtonSize.
        defaultBlank.
		accessIndicator.
        defaultBlank.
		link: subject name action: [enterSubject:: ClassSubject onDeclaration: subject classMirror].
	} row2: {
		(row: {deferred: [(label: subject classCommentSummary)
			smallFont;
			color: secondaryTextColor]})
				compressibility: 1.
		filler
			compressibility: 0.

		(ClassActionsPresenter onSubject: subject) elasticity: 1.
		mediumBlank.
		entryActionsMenu.
	}
)
) : (
)
public class ClassModel forClassDeclarationMirror: cdm <ClassDeclarationMirror> = (
	(* UI model for single class IDE; class defined by ClassDeclarationMirror.
        public for use in Workspace. 
    *)
	|
    private classDeclarationMirror <ClassDeclarationMirror> = cdm.
    |
    
    (* Browsing version
		public class ClassModel declaration: cd <ClassDeclarationMirror> exemplar: e <ObjectMirror | Nil> enclosing: o <ObjectMirror | Nil>  
		= (
		|
		public klass <ClassDeclarationMirror> = cd.
        	public exemplar <ObjectMirror | Nil> ::= e.
        	enclosing_slot <ObjectMirror | Nil> ::= e isNil ifTrue: [o].
		|
    	assert: [cd isKindOfClassDeclarationMirror] message: 'ClassModel built upon another ClassModel?!'.
		)   
	*)
) (
public classMirror ^ <ClassDeclarationMirror> = (
  ^classDeclarationMirror
)
public hash ^ <Integer> = (
	^ classDeclarationMirror hash (* bitXor: exemplar hash *)
)
public isKindOfClassModel ^ <Boolean>  = (
	(* Support for method ClassModel#=*)
  ^true
)
public = other <Object> ^ <Boolean> = (
	other isKindOfClassModel ifFalse: [^false].
    (* classMirror answers private slot classDeclarationMirror *)
    ^classMirror = other classMirror (* and: [exemplar = other exemplar]. *).
    )
public name = (
	^ classMirror name.
)
) : (
)
public class ClassSubject onClassModel: model <ClassModel> = ProgrammingSubject onModel: model (
	
	(* Browsing>>ClassSubject has this: .
	public class ClassSubject onClassModel: m <ClassModel> = ProgrammingSubject onModel: m (
	  | 
	  public exemplar <ObjectMirror> ::= classModel exemplar.
	  lazySlotsSubject_slot  <LazySlotGroupSubject>  
      nestedClassesSubject_slot  <NestedClassGroupSubject>
	  methodsSubject_slot  <MethodGroupSubject>
	  classMethodsSubject_slot  <MethodGroupSubject>
	  objectSubject_slot <ObjectSubject>
	  |
	)
	*)
    
	(* Note: The 'standard name' for factory of ~ClassSubject~ should be ~ClassSubject onModel: model~.
      But: Existing code ~Document>>Documents#ampletForClass:~ sends 'ClassSubject onClassModel: model <ClassModel>'. 
       So use a 'non-standard name' for this factory, and provide the 'standard name' as a class method ~ClassSubject onModel: model~.
    *)
    |
    nestedClassesSubject_slot  <NestedClassGroupSubject>
    modelObjectClassname = (ObjectMirror reflecting: model) getClass mixin name.
    |
    
    (modelObjectClassname = 'ClassModel') ifFalse: [break.].
) (
public createPresenter = (
	^ ClassPresenter onSubject: self.
)
public initiallyExpanded = (
	(* accessed from Presenter, must be public *)
	^ false.
)
public isMyKind: s <Subject> ^ <Boolean> = (
    ^ s isKindOfClassSubject.
)
public name = (
	^ model name.
)
public title = (
	^name
)
public isKindOfClassSubject ^ <Boolean> = (
  ^true
)
public isTopLevel = (
	(* Send from ClassActionsPresenter *)
	^nil = classMirror enclosingClass
)
public isApplicationConfiguration ^ <Boolean> = (
	(* Send from ClassActionsPresenter *)
  ^isTopLevel and: [
	classMirror primaryFactorySelector = #packageUsing: or: [
		classMirror classSide methods includesMirrorNamed: #packageUsing:
		]
	]
)
public compilationUnitSource ^ <String> = (
	(* from Browsing>>ClassSubject. Calculates source code from classMirror <ClassDeclarationMirror> *)
  isTopLevel ifTrue: [
	^compilationUnitFromSource: classMirror source
	].
  ^classMirror source
)
public classCommentText ^<String> = (
	(* First sentence of class comment *)
	| comment = classMirror header classComment. |
	nil = comment ifTrue: [^''].
	^comment
)
public enclosingClassSubjects ^ <List[ClassSubject]> = (
	(* Browsing>>ClassSubject has:.
	public enclosingClassSubjects ^ <List[ClassSubject]> = (
		| them = List new. c |
		c:: classMirror.
		[c isNil] whileFalse: [them add: (ClassSubject onDeclaration: c). c:: c enclosingClass].
		^them
	)    
    *)
	| them = List new. c |
	c:: classMirror.
	[c isNil] whileFalse: [them add: (ClassSubject onDeclaration: c). c:: c enclosingClass].
    (* mz log todo-remove 'start of enclosingClassSubjects them:' out. them do: [:classSubject | classSubject classMirror printString out]. 'end' out. *)
	^them
)
public isTestConfiguration = (
	(* Is sent from ClassActionsPresenter *)
  ^isTopLevel and: [
	classMirror primaryFactorySelector = #packageTestsUsing: or: [
		classMirror classSide methods includesMirrorNamed: #packageTestsUsing:
		]
	]
)
public nestedClassesSubject ^ <NestedClassGroupSubject> 
(* Subject for group of nested classes. *)
(* From Browsing>>ClassSubject#nestedClassesSubject. Removed exemplar: *)
= (
   (* If the slot supporting nestedClassesSubject is not set, create it, then return it *) 
   nestedClassesSubject_slot isNil ifTrue: [
     | 
     nestedClassesModel <MirrorGroupModel> = 
       (* MirrorGroupModel mirrorGroup: classMirror instanceSide ofMixin: classMirror instanceSide exemplar: exemplar. *)
        nestedClassGroupUI NestedClassGroupModel mirrorGroup: classMirror instanceSide ofMixin: classMirror instanceSide.
     nestedClassesSubject_tmp = nestedClassGroupUI NestedClassGroupSubject onModel: nestedClassesModel.
     |
	 nestedClassesSubject_slot:: nestedClassesSubject_tmp.
    ].
   ^nestedClassesSubject_slot
)
public accessModifier = (
	^classMirror accessModifier
)
public classMirror ^ <ClassDeclarationMirror> = (
	( 'model=', model printString ) out.
	^model classMirror
)
public classCommentSummary ^ <String> = (
	|
	fullComment <String> = classCommentText.
	endOfFirstSentence <Integer> = fullComment indexOf: '.'.
	firstSentence <String> = fullComment copyFrom: 1 to: endOfFirstSentence.
	|
	^firstSentence
)
) : (
public onDeclaration: cd <ClassDeclarationMirror> ^ <Instance> = (
  (* Browsing>>ClassSubject has: ^onClassModel: (ClassModel declaration: cd exemplar: nil) *)
  ^onClassModel: (ClassModel forClassDeclarationMirror: cd (* exemplar: nil *) )
)
public onModel: model <ClassModel> = (
	(* Forwarding this default selector to non-default factory selector. *)
	^ onClassModel: model
    )
)
public class ClassPresenter onSubject: subject <ClassSubject> = ProgrammingPresenter onSubject: subject (
	(* todo Browsing>>ClassPresenter contains: .
    class ClassPresenter onSubject: s = ProgrammingPresenter onSubject: s (
	  |
	  public lazySlotsPresenter <LazySlotGroupPresenter>  
	  public nestedClassesPresenter <NestedClassGroupPresenter>
	  public instanceMethodsPresenter <MethodGroupPresenter>
	  public classMethodsPresenter <MethodGroupPresenter>
      
	  classActionsPresenter <ClassActionsPresenter>
	  |
	)
    *)
	|
	public nestedClassesPresenter <NestedClassGroupPresenter>
    
    classActionsPresenter <ClassActionsPresenter> (* Presenter of the [deploy] [configurations] [run] [debug] fragment. *)
    |
) (
nestedClassesPresenters = (
	(* todo: use nestedClassesBrowsers to get this. *)
  ^ List new.
)
public isMyKind: f <Fragment> ^ <Boolean> = (
	^ f isKindOfClassPresenter.
)
public isKindOfClassPresenter = (
	^ true.
)
initiallyExpanded = (
	^ false.
)
expandedHeadingDefinition = (
^filler.
)
classNameAndContainmentDefinition ^ <Fragment> = (
	^column: {
		classNameAndHierarchySummary.
		preambleLine.
		label: subject classCommentSummary.
	}
)
classActionsMenu = (
	^menuWithLabelsAndActions: {
	 	{'Save to File'. [respondToSave]}.
		 #separator.
		{'Inspect Mirror'. [inspectObject: subject classMirror]}.
		{'Inspect Presenter'. [respondToInspectPresenter]}.
		#separator.
		{'Delete'. [respondToDelete]}.
	}
)
helpText ^ <Fragment> = (

(* Help text shown in the ~helpSection~ div above the Class line. *)
	|mapping = Map new.|
    (*
    mapping
    at: #classTestActions put: classActions testActions;  
    at: #classDeployAction put: classActions deployAction;
    at: #classEditDeploymentsAction put: classActions editDeploymentsAction;
    at: #classRunAppAction put: classActions runAppAction;    
    at: #hopscotchClassActionsMenuButton put: (dropDownMenu: [classActionsMenu]);
    at: #hopscotchClassReferencesButton put: (itemReferencesButtonWithAction: [browseSelector: subject name]);
    at: #hopscotchHelpButton put: helpButton;
    at: #hopscotchRefreshButton put: refreshButton;
    at: #hopscotchSaveButton put: (saveButtonWithAction: [respondToSave]).
    *)
    
  ^ampleforth: 'A class presenter for Simple IDE Browser. See  Browsing>>ClassPresenter#helpText' mapping: mapping
)
headingDefinition ^ <Fragment> = (
	(* Fragment for collapsed and expanded Class section.
    	- Collapsed shows ~classNameAndHierarchySummary~, a row with: 
          - className with link to enterSubject and bread crumbs parts
          - classActionsPresenter
		  - itemReferencesButtonWithAction: [browseSelector: subject name]. 
		  -	saveButtonWithAction: [respondToSave].
		  -	refreshButton.
          - helpButton.
		  - dropDownMenu: [classActionsMenu].
       - Expanded shows ~expandedHeadingDefinition~  
         - todo
    *)
	^(column: {
		collapsed: [classNameAndHierarchySummary]
		expanded: [expandedHeadingDefinition]
        initiallyExpanded: initiallyExpanded. (* note: differs from Browsing>>ClassPresenter *)
	}) color: (Color h: 240 s: 0.05 v: 0.9).
)
respondToSave = (
	(* from Browsing>>ClassPresenter.
    	Call ~ide webFiles downloadFileName: CLASS_NAME fromString: SOURCE~
    *)
	ide webFiles downloadFileName: subject name, '.ns' fromString: subject compilationUnitSource. 
)
classNameAndHierarchySummary = (
	(* Answers Composer row with 
        - class name link, 
        - class actions
        - image buttons for:
          - item references
          - save button
          - refresh button
          - help button
        - drop down menu for:
          - save to file
          - inspect mirror
          - inspect presenter
          - delete class
    *)
	| parts <List[Fragment]> |
	parts:: List new.
	subject enclosingClassSubjects
		do: [:ecs | parts add: (link: ecs name action: [enterSubject:: ecs])]
		separatedBy: [parts add: ( label: ' in ')].
	^column: {
		row: {
			smallBlank.
			(image: ide images classIcon)
                 height: styleButtonSize.
			smallBlank.
			row: parts. (* Class name links. Starts with subject model class, up to top level class, joined by 'in' *)
			filler.
            label: subject classCommentSummary. (* Class comment. NOT in Browsing>>ClassPresenter. It is in Namespacing>>ClassEntryPresenter *)
            classActionsPresenter. (* Presenter of the [deploy] [configurations] [run] [debug] fragment. *)
			smallBlank.
			itemReferencesButtonWithAction: [browseSelector: subject name]. (* Image and action for 'find class references/usages': action value calls: ~enterSubject: Browsing>>SelectorSubject onModel: class name~  which shows Browsing>>SelectorPresenter *)
			smallBlank.
			saveButtonWithAction: [respondToSave]. (* Image and action for 'save class source': action value calls: ~ide webfiles downloadFileName: subject name fromString: subject compilationUnitSource=classMirror source~ *)
			smallBlank.
			refreshButton.			 (* Image and action for 'refresh shell': calls ~shell refresh~ *)
			smallBlank.
            helpButton.               (* Image and action for 'help': action value calls: ~helpHolder content: helpContents]) height: styleButtonSize~ which uses self helpText *)
			smallBlank.
			dropDownMenu: [classActionsMenu].  (* Three-dot dropDownMenu with name->action map for 1) 'Save to File', 2) 'Inspect Mirror' 3)  'Inspect Presenter', 4) 'Delete' of class. Detail calls on menu action value for 'inspect presenter': ~ProgrammingPresenter#respondToInspectPresenter~ ->  ~ProgrammingPresente#inspectObject: self=aClassPresenter~ -> ~enterSubject:: ObjectSubject onModel: (ObjectMirror reflecting: object)~ - Basically current presenter is replaced with ObjectPresentor on aClassPresenter=self=object on which the dropDownMenu is called!!! *)
		}
	}
)
public definition ^ <Fragment>  = (
	(* Fragment of ClassPresenter. *)

    (* Browsing>>ClassPresenter#definition. :     
    classActionsPresenter:: (ClassActionsPresenter onSubject: subject) elasticity: 1.
	^column: {
        helpSection.
		headingDefinition.
		lazySlotsPresenter:: subject lazySlotsSubject presenter.
		nestedClassesPresenter:: subject nestedClassesSubject presenter. ### will be: nestedClassesGroupBrowser(slot on ClassUI) ui subject presenter
		instanceMethodsPresenter:: subject methodsSubject presenter. ### will be: methodGroupBrowser(slot on ClassUI) ui subject presenter
		classMethodsPresenter:: subject classMethodsSubject presenter.
	}
    *)

	(* Prepare the presenter of the [deploy] [configurations] [run] [debug] fragment. Inserted into headingDefinition. *)
    classActionsPresenter:: (ClassActionsPresenter onSubject: subject) elasticity: 1.
    (* Column with help, heading (expanded or collapsed), then setting and inserting lazy slots, nested classes, etc. *)
	^column: {
        helpSection. (* Initially empty section above headingDefinition. It is filled after click on the "?" in headingDefinition *)
		headingDefinition. (* Fragment for collapsed or expanded Class Factory method with slots. Collapsed shows ~classNameAndHierarchySummary~ Expanded shows ~expandedHeadingDefinition~ *)
        
        (* Note that the ~headingDefinition~ above shows different fragments for collapsed/expanded, but fragments for everything below are the same both in expanded/collapsed! *)
        nestedClassesPresenter:: subject nestedClassesSubject presenter. (* prepare: nestedClassesGroupBrowser (slot on ClassUI) ui subject presenter *)
	}

)
) : (
)
public class ClassActionsPresenter onSubject: s = ProgrammingPresenter onSubject: s (
	(* Presenter of the [deploy] [configurations] [run] [debug] fragment.
	   Completely ripped off of Browsing where it is protected, so could not import.
       
       Uses the ClassSubject! There is no ClassActionsSubject.
	*)
) (
public isKindOfClassActionsPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfClassActionsPresenter
)
deployAsWebPageWithMirrorBuilders = (
#BOGUS yourself.
 (ide deployment jsPackagerForPlatform: cachedPlatform)
		packageApplicationConfiguration: (ide namespacing Root at: subject name)
		withRuntimeConfiguration: ide deployment RuntimeWithMirrorBuilders
		usingNamespace: ide namespacing Root.
)
deployAsWebPage = (
#BOGUS yourself.
 (ide deployment jsPackagerForPlatform: cachedPlatform)
		packageApplicationConfiguration: (ide namespacing Root at: subject name)
		withRuntimeConfiguration: ide deployment Runtime
		usingNamespace: ide namespacing Root.
)
definition = (
	^(row: {
        testActions.
        mediumBlank.
        deployAction.
        mediumBlank.
        editDeploymentsAction.
        mediumBlank.
        runAppAction.
        })
		mainAxisAlignToEnd.
)
deployAsVictoryFuel = (
	| bytes = subject bytesForVictoryFuel. |
  	ide webFiles downloadFileName: subject name, '.vfuel' fromBytes: bytes.
)
deployAsVictoryFuelWithMirrors = (
      | bytes = subject bytesForVictoryFuelWithMirrors. |
  	ide webFiles downloadFileName: subject name, '.vfuel' fromBytes: bytes.
)
future_deployAction = (
(* Eventually, we'll use the deployment manager for deployment.
    At that point, this method will replace the current #deployAction
    implementation. Alas, this will take a while, as we need to implement
    a general strategy for reconstituting serialized aliens for this to work.
*)
	subject isApplicationConfiguration ifFalse: [^nothing].
	^link: '[deploy]' action: [
			openMenu:: menuWithLabelsAndActions: (
               ide deployment configurations collect: [:dc <DeploymentConfiguration> |
                   {'to ', dc name.
                   [ide deployment deploy: (ide namespacing Root at: subject name) on: dc]}]
			)
		]
)
respondToRunApp: paused = (
	(* bogus: The subject might not be in the root namespace. *)
	| appConfig manifest platform args thread |
	appConfig:: ide namespacing Root at: subject name.
	manifest:: ide namespacing manifest.
	platform:: cachedPlatform.
	args:: {}.
	thread:: platform mirrors ActivationMirror invokeSuspended:
		[(appConfig packageUsing: manifest) main: AppPlatform new args: args].
	paused ifFalse: [thread resume].
	thread isFulfilled ifFalse:
		[enterSubject:: ide debugging ThreadSubject onModel: thread].
)
respondToRunTests = (
	| thread |
	thread:: cachedPlatform mirrors ActivationMirror invokeSuspended:
		[enterSubject:: subject testingSubject].
    thread resume.
	thread isFulfilled
       ifFalse:
		[enterSubject:: ide debugging ThreadSubject onModel: thread].
)
respondToShowTests = (
	| thread |
	thread:: cachedPlatform mirrors ActivationMirror invokeSuspended:
		[enterSubject:: subject inactiveTestingSubject].
    thread resume.
	thread isFulfilled
       ifFalse:
		[enterSubject:: ide debugging ThreadSubject onModel: thread].
)
public testActions = (
	subject isTestConfiguration ifFalse: [^nothing].
	^row: {
		link: '[run tests]' action: [respondToRunTests].
		link: '[show tests]' action: [respondToShowTests]}.
)
public runAppAction = (
	subject isApplicationConfiguration ifFalse: [^nothing].
    ^row: {
			link: '[run]' action: [respondToRunApp: false].
			link: '[debug]' action: [respondToRunApp: true].
		}
)
public editDeploymentsAction = (
| DeploymentConfigurationSubject = ide deployment DeploymentConfigurationSubject. |
	subject isApplicationConfiguration ifFalse: [^nothing].
	^link: '[configurations]' action: [
			openMenu:: menuWithLabelsAndActions:
               ((ide deployment configurations) collect: [:dc <DeploymentConfiguration> |
                   {dc name. [enterSubject:: DeploymentConfigurationSubject onModel: dc]}]),
                {{'Create New Deployment'. [enterSubject:: DeploymentConfigurationSubject onModel: ide deployment defaultConfiguration]}}
		]
)
public deployAction = (
	subject isApplicationConfiguration ifFalse: [^nothing].
	^(link: '[deploy]' action: [
			openMenu:: menuWithLabelsAndActions: {
				{'as VictoryFuel'. [deployAsVictoryFuel]}.
				{'as VictoryFuel with Mirrors'. [deployAsVictoryFuelWithMirrors]}.
				{'as Web Page'. [deployAsWebPage]}.
				{'as Web Page with Mirror Builders'. [deployAsWebPageWithMirrorBuilders]}.
			}
		]).
)
) : (
)
public class MethodGroupUI new = (
  |
  (* indented browsers *)
  (* none *)
  |
) (
class MethodGroupModel new = (

) (
) : (
)
class MethodGroupSubject onModel: m = Subject onModel: m (

) (
public isMyKind: s <Subject> ^ <Boolean> = (
	^ s isKindOfMethodGroupSubject.
)
public isKindOfMethodGroupSubject = (
	^ true.
)
) : (
)
class MethodGroupPresenter onSubject: s = Presenter onSubject: s (

) (
public isMyKind: f <Fragment> ^ <Boolean> = (
	^ f isKindOfMethodGroupPresenter.
)
public isKindOfMethodGroupPresenter = (
	^ true.
)
) : (
)
) : (
)
public class NestedClassGroupUI new = (
 |
    (* Only need Subject. Can get presenter and view from it 
    subject = NestedClassGroupSubject onModel: (NestedClassGroupModel new).
    *)

(* indented browsers *)
(* none *)
 |
) (
public class NestedClassGroupModel mirrorGroup: ms <MirrorGroup> ofMixin: m = MirrorGroupModel mirrorGroup: ms ofMixin: m (
) (
) : (
)
public class NestedClassGroupSubject onModel: m <MirrorGroupModel[ClassDeclarationMirror]> = MirrorGroupSubject onModel: m (
(* Represents the collection of nested classes of a Newspeak class. Holds onto the mirror group for the classes. *)
) (
public colorizeClassSource: source <String> editor: cm <CodeMirrorFragment> = (
	^ide colorizer
		colorizeClassDeclaration: source
		fromClass: definingMixin declaration
		via: (colorizingBlockFor: cm)
)
public isKindOfNestedClassGroupSubject ^ <Boolean> = (
  ^true
)
public isMyKind: s <Subject> ^ <Boolean> = (
  ^s isKindOfNestedClassGroupSubject
)
public createPresenter = (
	^NestedClassGroupPresenter onSubject: self
)
elementSubjectClass ^ <ClassSubject class> = (
	(* Each element is presented as ClassPresenter/ClassSubject/ClassModel - this needs to be returned here *)
	^ClassSubject
)
elementFor: m <Mirror> = (
	(* Each element is presented as ClassPresenter/ClassSubject/ClassModel - this needs to be returned here *)
	(* ^ClassModel declaration: m exemplar: nil enclosing: exemplar *)
   ^ClassModel forClassDeclarationMirror: m.
)
elementModelClass ^ <ClassModel class> = (
	(* Each element is presented as ClassPresenter/ClassSubject/ClassModel - this needs to be returned here *)
    ^ ClassModel
)
public modelMirrorCollection ^<Collection[Mirror]> = (
	^List withAll: definingMixin nestedClasses
)
) : (
)
public class NestedClassGroupPresenter onSubject: s = MirrorGroupPresenter onSubject: s (
(* Presents the subject, a NestedClassGroupSubject, as a column of presenters for the nested classes in the group. Automatically gets updated after the subject mirror group. Anything that has to do with adding, editing or deleting NS nested classes goes here. *)
) (
listDescription ^ <String> = (
	(* Needed only for help. *)
  ^'nested class'
)
public title = (
	(* Used in HopscotchWindow#displayPresenter to show title - not sure where in UI *)
  ^'Classes'
)
elementDescription ^ <String> = (
	(* Used in Help only *)
  ^'nested classes of the surrounding class'
)
elementPresenterClass ^ <ProgrammingPresenter class> = (
	(* Each element is presented as ClassPresenter/ClassSubject/ClassModel - ClassPresenter SHOULD be returned here. BUT WE RETURN ClassEntryPresenter, WHICH WILL USE ClassSubject, SAME SUBJECT AS ClassPresenter WOULD. *)
    ^ ClassEntryPresenter.
)
) : (
)
) : (
)
public class MirrorGroupModel mirrorGroup: ms <MirrorGroup> ofMixin: m (*exemplar: e <ObjectMirror | Nil>*)
(*
Copied from Browsing>>MirrorGroupModel but exemplar removed. 
Base model for 
  1) NestedClassGroupModel (silent), serving NestedClassGroupSubject and NestedClassGroupPresenter
  2) MethodGroupModel (silent), serving MethodGroupSubject and MethodGroupPresenter
  
Instances creation use case:

Let's say we want to display nested classes for class MyClass. The group of (list of) the nested classes
can be obtained as follows:
  a) We create aMyClassDeclarationMirror for class MyClass as ~(ClassMirror reftecting: MyClass) mixin declaration.
  b) We create aMirrorGroupModel (this class instance) as  ~MirrorGroupModel mirrorGroup: aMyClassDeclarationMirror instanceSide ofMixin: aMyClassDeclarationMirror instanceSide~
  
Note: The reason we pass 2 params is for reuse for NestedClassGroupModel (where aMyClassDeclarationMirror instanceSide is needed in both) and MethodGroupModel (where ~methods~ is part of the ofMixin: argument)
*)
 = (
	|
	public mirrorGroup <MixinModel> = ms. (* for NestedClassGroupModel, MixinMirror. Reason: Caller passes ~aClassModel=aClassDeclarationMirror instanceSide~ which is aMixinMirror. *)
    public definingMixin = m. (* for NestedClassGroupModel, MixinMirror. Reason: As in ms above. *)
    (*public exemplar <ObjectMirror | Nil> = e.*)
	|
    ) (
public = other ^ <Boolean> = (
	other isKindOfMirrorGroupModel ifFalse: [^false].
    ^mirrorGroup = other mirrorGroup and: [definingMixin = other definingMixin (*and: [exemplar = other exemplar]*)].
)
public hash ^<Integer> = (
	^(mirrorGroup hash bitXor: definingMixin hash) (* bitXor: exemplar hash *)
)
public isKindOfMirrorGroupModel ^ <Boolean>  = (
  ^true
)
public isMyKind: other = (
	^ other isKindOfMirrorGroupModel
)
) : (
)
public class MirrorGroupSubject onModel: m <MirrorGroupModel> = ProgrammingSubject onModel: m (
	|
    (* Slot with subjects, each subject is for one nested class. *)
	elements_slot <Collection[Subject]>
	|
) (
public mirrorGroup ^ <MirrorGroup> = (
    (* model is a MixinMirror, so mirrorGroup can be sent to it. *)
    break.
	^model mirrorGroup
)
public definingMixin ^ <MixinMirror> = (^ model definingMixin)
public elements ^<Collection[Subject]> = (
	(* Answer a collection of subjects on individual elements of the group which is our subject. *)
    elements_slot isNil ifTrue: [
    (* Original had fromModel: *)
	 elements_slot::  modelMirrorCollection collect: [:each | elementSubjectClass onModel: (elementFor: each)].
     ^elements_slot
     ].
     updateElements. 
   ^elements_slot
)
public updateElements = (
(* todo-00 removed for now
  |
  subjectMirrors <List[Mirror]> = elements_slot collect: [:e <Subject> |
    e model mirror
  ].
  obsoleteSubjects <List[Subject]> = List new.
  |
  elements_slot do: [:s <Subject> |
    (modelMirrorCollection includes: s model mirror) ifFalse: [obsoleteSubjects add: s].
  ].
  obsoleteSubjects do: [:s <Subject> | elements_slot remove: s].
  modelMirrorCollection do: [:m <Mirror> |
    (subjectMirrors includes: m) ifFalse: [
      elements_slot add: (elementSubjectClass fromModel: (elementFor: m))
      ].
  ].
  *)
)
elementModelClass = (
	(* Answer the class of the models we create for individual elements of our subject group. *)
	subclassResponsibility
)
modelMirrorCollection ^<Collection[Mirror]> = (
	^subclassResponsibility
)
elementFor: m <Mirror> = (
	^subclassResponsibility
)
elementSubjectClass = (
	(* Answer the class of the subjects we create on individual elements of our subject group. *)
	subclassResponsibility
)
public isKindOfMirrorGroupSubject ^ <Boolean> = (
	break.
  ^true
)
) : (
)
public class MirrorGroupPresenter onSubject: s <Subject> = DefinitionListPresenter onSubject: s (
) (
elementPresenterClass ^ <ProgrammingPresenter class> = (
	(* A subclass must redefine this to define the class of presenter it will be using. *)
	subclassResponsibility
)
createPresenterForSubject: aSubject <Subject> ^ <ProgrammingPresenter> = (
	(* Let the subject create its default unless elementPresenterClass is set to specify our preference. *)
	nil = elementPresenterClass ifTrue: [^aSubject presenter].
	^elementPresenterClass onSubject: aSubject
)
contentPresenters ^ <Collection[ProgrammingPresenter]> = (
    (* alert: 'In MirrorGroupPresenter#contentPresenters subject=', subject printString, ' self=', self printString, ' self subject=', self subject printString. *)
    (* note-00 subject was resolved to ClassSubject when we kept subject slot on outer ClassUI. THIS WAS THE RESULT OF VIRTUAL LOOKUP LOOKING FOR 'subject' AT LEXICAL SCOPE BEFORE SUPERCLASS . *)
	^(subject elements collect:
		[:each <Subject> | createPresenterForSubject: each]) 
        (* todo-00 do NOT sort for now, as name in  p1 subject name not understood
        sort: [:p1 <ProgrammingPresenter> :p2 <ProgrammingPresenter> | 
            lexicallyLessOrEqual: p1 subject name than: p2 subject name
          ]
          *)
)
) : (
)
) : (
)
private browseClass: klass <Behavior | ClassDeclarationMirror> = (      
    |
	classOrClassDeclarationMirror = klass.
	classUI = self ClassUI forClassDefinedBy: classOrClassDeclarationMirror.
    classDeclarationMirror = classUI classDeclarationMirror.
    nestedClassesGroup = classUI nestedClassesGroup.
    |
    classDeclarationMirror name out. 
    nestedClassesGroup do: [:nestedClassDeclarationMirror | ('   ', nestedClassDeclarationMirror name) out].
    
   )
public compilationUnitFromSource: src <String> ^ <String> 
(*  :exemplar: compilationUnitFromSource: 'class Foo = ( | x = 0. |) (twiceX = (^2*x))' *)
(* copied from Browsing instance method *)
= (
	^'Newspeak3', String newline,  'Root' printString, String newline, src
)
public browseIDEClasses = (
      	(* Browse first 5 classes in IDE Root namespace. *)
          |browsedCount ::=  0.|
          	ide namespacing Root values do: [ :klass |
      		    browsedCount < 5 
                  	ifTrue: [
      	    			browsedCount: browsedCount + 1.
              
          	    		(* core *)
          				browseClassToOut: klass.
              		]
          ]
      )
private browseClassToOut: klass <Behavior | ClassDeclarationMirror> = (
	(* Browses the passed klass name and nested classes names, outputted to out. *)
    |
	classOrClassDeclarationMirror = klass.
	classUI = self ClassUI forClassDefinedBy: classOrClassDeclarationMirror.
    classDeclarationMirror = classUI classDeclarationMirror.
    nestedClassesGroup = classUI nestedClassesGroup.
    |
    classDeclarationMirror name out. 
    nestedClassesGroup do: [:nestedClassDeclarationMirror | ('   ', nestedClassDeclarationMirror name) out].
    
   )
) : (
)
