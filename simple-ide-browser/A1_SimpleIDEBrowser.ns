Newspeak3
'Root'
class A1_SimpleIDEBrowser usingPlatform: platform <Platform> webIDE: ide <HopscotchWebIDE> 
  (* :exemplar:  A1_SimpleIDEBrowser usingPlatform: platform webIDE: ide. *)
  = (
	|
    (* imports *)
    List = platform collections List.    
    Map = platform collections Map.    
	ClassMirror = platform mirrors ClassMirror.

	Presenter = platform hopscotch Presenter.
    Subject = platform hopscotch Subject.
    
    (* cheating imports of full classes from ide browsing instead of reimplementing them *)
	ProgrammingPresenter = ide browsing ProgrammingPresenter.
    ProgrammingSubject =  ide browsing ProgrammingSubject.

	Exception = platform kernel Exception.
    Color = platform graphics Color.
    
    (* slots *)
    ide = ide.
    classUIs <List[ClassUI]> (* todo : should this be ClassGroup? *)
    
    (* Style *)    
	styleHeaderPadRight <Float> = 0.0.
    styleButtonSize <Float> = 30.
    
	|
  ) (
public class ClassUI forClassDefinedBy: classOrClassDeclarationMirror <Behavior|ClassDeclarationMirror> = (
    (* Simple UI for presenting a Class with members: slots, nested classes, methods. 
    	Holds two types of slots:
          1. model-defining slots for instances of enclosed 
              <ClassModel>, <FactoryUI>, <NestedClassGroupUI>,  <MethodGroupUI>
          2. slots of those instances.
    *)
  	|
    (* Model defining slot for <ClassModel>. public for accesibility to pass to nested ClassModel factory *)
    public classDeclarationMirror = classOrClassDeclarationMirror isKindOfClass 
    	ifTrue: [(ClassMirror reflecting: classOrClassDeclarationMirror) mixin declaration]
        ifFalse: [
        	classOrClassMirror isKindOfClassDeclarationMirror
            	ifTrue: [classOrClassDeclarationMirror]
                ifFalse: [break. Exception signal: 'Perhaps trying to pass aClassMirror? Pass aClassMirror declaration <ClassDeclarationMirror> instead.']
        ].
  
    (* todo Only need Subject. Can get presenter and view from it *)
    subject = ClassSubject onClassModel: (ClassModel forClassDeclarationMirror: classDeclarationMirror).

	(* members used by multiple models in UI and it's nested classes *)
    
    (* instanceSide returns MixinMirror, which has API similar to ClassMirror, can get slots, nestedClasses, methods from it. *)
    (* Model defining slot for <NestedClassGroupModel> *)
    public nestedClassesGroup <MirrorGroup[ClassDeclarationMirror]> =  classDeclarationMirror instanceSide nestedClasses.
    (* Model defining slot for <MethodGroupModel> *)
    public nestedClassDeclarationMirrors ::= nestedClassesGroup do: [:nestedClassDeclarationMirror | nestedClassDeclarationMirror].

    (* indented UIs *)
	factoryUI <FactoryUI> (* todo : this seems replaced with headingDefinition *)
    (* todo: finish: nestedClassesUIs <List[ClassUI]> ::= nestedClassDeclarationMirrors collect: [:nestedClassDeclarationMirror | ClassUI forClass: nestedClassDeclarationMirror klass]. *)
    nestedClassGroupUI <NestedClassGroupUI>
    instanceMethodGroupUI <MethodGroupUI>
    classMethodGroupUI <MethodGroupUI>    
	|
    ) (
public class ClassModel forClassDeclarationMirror: cdm <ClassDeclarationMirror> = (
	(* UI model for class presentation and editing, model base is ClassDeclarationMirror.
        public for use in Workspace. 
    *)
	|
    private classDeclarationMirror <ClassDeclarationMirror> = cdm.
    |
    
    (* Browsing version
		public class ClassModel declaration: cd <ClassDeclarationMirror> exemplar: e <ObjectMirror | Nil> enclosing: o <ObjectMirror | Nil>  
		= (
		|
		public klass <ClassDeclarationMirror> = cd.
        	public exemplar <ObjectMirror | Nil> ::= e.
        	enclosing_slot <ObjectMirror | Nil> ::= e isNil ifTrue: [o].
		|
    	assert: [cd isKindOfClassDeclarationMirror] message: 'ClassModel built upon another ClassModel?!'.
		)   
	*)
) (
public classMirror ^ <ClassDeclarationMirror> = (
  ^classDeclarationMirror
)
public hash ^ <Integer> = (
	^ classDeclarationMirror hash (* bitXor: exemplar hash *)
)
public isKindOfClassModel ^ <Boolean>  = (
	(* Support for method ClassModel#=*)
  ^true
)
public = other <Object> ^ <Boolean> = (
	other isKindOfClassModel ifFalse: [^false].
    (* classMirror answers private slot classDeclarationMirror *)
    ^classMirror = other classMirror (* and: [exemplar = other exemplar]. *).
    )
public name = (
	^ classMirror name.
)
) : (
)
public class ClassSubject onClassModel: model <ClassModel> = ProgrammingSubject onModel: model (
	
	(* Browsing>>ClassSubject has this: .
	public class ClassSubject onClassModel: m <ClassModel> = ProgrammingSubject onModel: m (
	  | 
	  public exemplar <ObjectMirror> ::= classModel exemplar.
	  lazySlotsSubject_slot  <LazySlotGroupSubject>  
      nestedClassesSubject_slot  <NestedClassGroupSubject>
	  methodsSubject_slot  <MethodGroupSubject>
	  classMethodsSubject_slot  <MethodGroupSubject>
	  objectSubject_slot <ObjectSubject>
	  |
	)
	*)
    
	(*  ~Document>>Documents#ampletForClass:~ sends 'ClassSubject onClassModel: model <ClassModel>'. 
       So keep it, and provide the 'standard signature' class method ClassSubject onModel <ClassModel>' 
    *)
    
) (
public createPresenter = (
	^ ClassPresenter onSubject: self.
)
public initiallyExpanded = (
	(* accessed from Presenter, must be public *)
	^ false.
)
public isMyKind: s <Subject> ^ <Boolean> = (
    ^ s isKindOfClassSubject.
)
public name = (
	^ model name.
)
public title = (
	^name
)
public classMirror ^ <ClassDeclarationMirror> = (
	^model classMirror
)
public isKindOfClassSubject ^ <Boolean> = (
  ^true
)
public isTestConfiguration = (
	(* Send from ClassActionsPresenter *)
  ^isTopLevel and: [
	classMirror primaryFactorySelector = #packageTestsUsing: or: [
		classMirror classSide methods includesMirrorNamed: #packageTestsUsing:
		]
	]
)
public isTopLevel = (
	(* Send from ClassActionsPresenter *)
	^nil = classMirror enclosingClass
)
public isApplicationConfiguration ^ <Boolean> = (
	(* Send from ClassActionsPresenter *)
  ^isTopLevel and: [
	classMirror primaryFactorySelector = #packageUsing: or: [
		classMirror classSide methods includesMirrorNamed: #packageUsing:
		]
	]
)
public compilationUnitSource ^ <String> = (
	(* from Browsing>>ClassSubject. Calculates source code from classMirror <ClassDeclarationMirror> *)
  isTopLevel ifTrue: [
	^compilationUnitFromSource: classMirror source
	].
  ^classMirror source
)
public classCommentSummary ^ <String> = (
	|
	fullComment <String> = subject classCommentText.
	endOfFirstSentence <Integer> = fullComment indexOf: '.'.
	firstSentence <String> = fullComment copyFrom: 1 to: endOfFirstSentence.
	|
	^firstSentence
)
public classCommentText ^<String> = (
	(* First sentence of class comment *)
	| comment = classMirror header classComment. |
	nil = comment ifTrue: [^''].
	^comment
)
public enclosingClassSubjects ^ <List[ClassSubject]> = (
	(* Browsing>>ClassSubject has:.
	public enclosingClassSubjects ^ <List[ClassSubject]> = (
		| them = List new. c |
		c:: classMirror.
		[c isNil] whileFalse: [them add: (ClassSubject onDeclaration: c). c:: c enclosingClass].
		^them
	)    
    *)
	| them = List new. c |
	c:: classMirror.
	[c isNil] whileFalse: [them add: (ClassSubject onDeclaration: c). c:: c enclosingClass].
    (* mz log todo-remove 'start of enclosingClassSubjects them:' out. them do: [:classSubject | classSubject classMirror printString out]. 'end' out. *)
	^them
)
) : (
public onDeclaration: cd <ClassDeclarationMirror> ^ <Instance> = (
  (* Browsing>>ClassSubject has: ^onClassModel: (ClassModel declaration: cd exemplar: nil) *)
  ^onClassModel: (ClassModel forClassDeclarationMirror: cd (* exemplar: nil *) )
)
public onModel: model <ClassModel> = (
	(* Forwarding this default selector to non-default factory selector. *)
	^ onClassModel: model
    )
)
public class ClassPresenter onSubject: subject <ClassSubject> = ProgrammingPresenter onSubject: subject (
	(* todo Browsing>>ClassPresenter contains: .
    class ClassPresenter onSubject: s = ProgrammingPresenter onSubject: s (
	  |
	  public lazySlotsPresenter <LazySlotGroupPresenter>  
	  public nestedClassesPresenter <NestedClassGroupPresenter>
	  public instanceMethodsPresenter <MethodGroupPresenter>
	  public classMethodsPresenter <MethodGroupPresenter>
	  classActionsPresenter <ClassActionsPresenter>
	  |
	)
    *)
	|
	classActionsPresenter <ClassActionsPresenter> (* Presenter of the [deploy] [configurations] [run] [debug] fragment. *)
    |
) (
nestedClassesPresenters = (
	(* todo: use nestedClassesBrowsers to get this. *)
  ^ List new.
)
public isMyKind: f <Fragment> ^ <Boolean> = (
	^ f isKindOfClassPresenter.
)
public isKindOfClassPresenter = (
	^ true.
)
initiallyExpanded = (
	^ false.
)
expandedHeadingDefinition = (
^filler.
)
classNameAndContainmentDefinition ^ <Fragment> = (
	^column: {
		classNameAndHierarchySummary.
		preambleLine.
		label: subject classCommentSummary.
	}
)
classActionsMenu = (
	^menuWithLabelsAndActions: {
	 	{'Save to File'. [respondToSave]}.
		 #separator.
		{'Inspect Mirror'. [inspectObject: subject classMirror]}.
		{'Inspect Presenter'. [respondToInspectPresenter]}.
		#separator.
		{'Delete'. [respondToDelete]}.
	}
)
helpText ^ <Fragment> = (

(* Help text shown in the ~helpSection~ div above the Class line. *)
	|mapping = Map new.|
    (*
    mapping
    at: #classTestActions put: classActions testActions;  
    at: #classDeployAction put: classActions deployAction;
    at: #classEditDeploymentsAction put: classActions editDeploymentsAction;
    at: #classRunAppAction put: classActions runAppAction;    
    at: #hopscotchClassActionsMenuButton put: (dropDownMenu: [classActionsMenu]);
    at: #hopscotchClassReferencesButton put: (itemReferencesButtonWithAction: [browseSelector: subject name]);
    at: #hopscotchHelpButton put: helpButton;
    at: #hopscotchRefreshButton put: refreshButton;
    at: #hopscotchSaveButton put: (saveButtonWithAction: [respondToSave]).
    *)
    
  ^ampleforth: 'A class presenter for Simple IDE Browser. See  Browsing>>ClassPresenter#helpText' mapping: mapping
)
headingDefinition ^ <Fragment> = (
	(* Fragment for collapsed and expanded Class section.
    	- Collapsed shows ~classNameAndHierarchySummary~, a row with: 
          - className with link to enterSubject and bread crumbs parts
          - classActionsPresenter
		  - itemReferencesButtonWithAction: [browseSelector: subject name]. 
		  -	saveButtonWithAction: [respondToSave].
		  -	refreshButton.
          - helpButton.
		  - dropDownMenu: [classActionsMenu].
       - Expanded shows ~expandedHeadingDefinition~  
         - todo
    *)
	^(column: {
		collapsed: [classNameAndHierarchySummary]
		expanded: [expandedHeadingDefinition]
        initiallyExpanded: initiallyExpanded. (* note: differs from Browsing>>ClassPresenter *)
	}) color: (Color h: 240 s: 0.05 v: 0.9).
)
public definition ^ <Fragment>  = (
	(* Fragment of ClassPresenter. *)

    (* Browsing>>ClassPresenter#definition. :     
    classActionsPresenter:: (ClassActionsPresenter onSubject: subject) elasticity: 1.
	^column: {
        helpSection.
		headingDefinition.
		lazySlotsPresenter:: subject lazySlotsSubject presenter.
		nestedClassesPresenter:: subject nestedClassesSubject presenter. ### will be: nestedClassesGroupBrowser(slot on ClassUI) ui subject presenter
		instanceMethodsPresenter:: subject methodsSubject presenter. ### will be: methodGroupBrowser(slot on ClassUI) ui subject presenter
		classMethodsPresenter:: subject classMethodsSubject presenter.
	}
    *)

	(* Prepare the presenter of the [deploy] [configurations] [run] [debug] fragment. Inserted into headingDefinition. *)
    classActionsPresenter:: (ClassActionsPresenter onSubject: subject) elasticity: 1.
    (* Column with help, heading (expanded or collapsed), then setting and inserting lazy slots, nested classes, etc. *)
	^column: {
        helpSection. (* Initially empty section above headingDefinition. It is filled after click on the "?" in headingDefinition *)
		headingDefinition.
        (*
        row: {
            	link: subject className action: [openOnNewPage].
                filler.
                dropDownMenu: [filePresenterMenu]
                }
        *)        
	}

)
respondToSave = (
	(* from Browsing>>ClassPresenter.
    	Call ~ide webFiles downloadFileName: CLASS_NAME fromString: SOURCE~
    *)
	ide webFiles downloadFileName: subject name, '.ns' fromString: subject compilationUnitSource. 
)
classNameAndHierarchySummary = (
	(* Answers Composer row with 
        - class name link, 
        - class actions
        - image buttons for:
          - item references
          - save button
          - refresh button
          - help button
        - drop down menu for:
          - save to file
          - inspect mirror
          - inspect presenter
          - delete class
    *)
	| parts <List[Fragment]> |
	parts:: List new.
	subject enclosingClassSubjects
		do: [:ecs | parts add: (link: ecs name action: [enterSubject:: ecs])]
		separatedBy: [parts add: ( label: ' in ')].
	^column: {
		row: {
			smallBlank.
			(image: ide images classIcon)
                 height: styleButtonSize.
			smallBlank.
			row: parts.
			filler.
            label: subject classCommentSummary. (* NOT in Browsing>>ClassPresenter. It is in Namespacing>>ClassEntryPresenter *)
            classActionsPresenter. (* Presenter of the [deploy] [configurations] [run] [debug] fragment. *)
			smallBlank.
			itemReferencesButtonWithAction: [browseSelector: subject name]. (* image and action for 'find class references/usages': action value calls: ~enterSubject: Browsing>>SelectorSubject onModel: class name~  which shows Browsing>>SelectorPresenter *)
			smallBlank.
			saveButtonWithAction: [respondToSave]. (* image and action for 'save class source': action value calls: ~ide webfiles downloadFileName: subject name fromString: subject compilationUnitSource=classMirror source~ *)
			smallBlank.
			refreshButton.			 (* image and action for 'refresh shell': calls ~shell refresh~ *)
			smallBlank.
            helpButton.               (* image and action for 'help': action value calls: ~helpHolder content: helpContents]) height: styleButtonSize~ which uses self helpText *)
			smallBlank.
			dropDownMenu: [classActionsMenu].  (* dropDownMenu with name->action map for 'save to file', 'inspect presenter', 'inspect mirror' and 'delete' of class: menu action value for 'inspect presenter' calls: ~ProgrammingPresente#respondToInspectPresenter~ ->  ~ProgrammingPresente#inspectObject: self=aClassPresenter~ -> ~enterSubject:: ObjectSubject onModel: (ObjectMirror reflecting: object)~ - Basically current presenter is replaced with ObjectPresentor on aClassPresenter=self=object on which the dropDownMenu is called!!! *)
		}
	}
)
) : (
)
public class ClassActionsPresenter onSubject: s = ProgrammingPresenter onSubject: s (
	(* Presenter of the [deploy] [configurations] [run] [debug] fragment.
	   Completely ripped off of Browsing where it is protected, so could not import.
       
       Uses the ClassSubject! There is no ClassActionsSubject.
	*)
) (
public isKindOfClassActionsPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfClassActionsPresenter
)
deployAsWebPageWithMirrorBuilders = (
#BOGUS yourself.
 (ide deployment jsPackagerForPlatform: cachedPlatform)
		packageApplicationConfiguration: (ide namespacing Root at: subject name)
		withRuntimeConfiguration: ide deployment RuntimeWithMirrorBuilders
		usingNamespace: ide namespacing Root.
)
deployAsWebPage = (
#BOGUS yourself.
 (ide deployment jsPackagerForPlatform: cachedPlatform)
		packageApplicationConfiguration: (ide namespacing Root at: subject name)
		withRuntimeConfiguration: ide deployment Runtime
		usingNamespace: ide namespacing Root.
)
definition = (
	^(row: {
        testActions.
        mediumBlank.
        deployAction.
        mediumBlank.
        editDeploymentsAction.
        mediumBlank.
        runAppAction.
        })
		mainAxisAlignToEnd.
)
deployAsVictoryFuel = (
	| bytes = subject bytesForVictoryFuel. |
  	ide webFiles downloadFileName: subject name, '.vfuel' fromBytes: bytes.
)
deployAsVictoryFuelWithMirrors = (
      | bytes = subject bytesForVictoryFuelWithMirrors. |
  	ide webFiles downloadFileName: subject name, '.vfuel' fromBytes: bytes.
)
future_deployAction = (
(* Eventually, we'll use the deployment manager for deployment.
    At that point, this method will replace the current #deployAction
    implementation. Alas, this will take a while, as we need to implement
    a general strategy for reconstituting serialized aliens for this to work.
*)
	subject isApplicationConfiguration ifFalse: [^nothing].
	^link: '[deploy]' action: [
			openMenu:: menuWithLabelsAndActions: (
               ide deployment configurations collect: [:dc <DeploymentConfiguration> |
                   {'to ', dc name.
                   [ide deployment deploy: (ide namespacing Root at: subject name) on: dc]}]
			)
		]
)
respondToRunApp: paused = (
	(* bogus: The subject might not be in the root namespace. *)
	| appConfig manifest platform args thread |
	appConfig:: ide namespacing Root at: subject name.
	manifest:: ide namespacing manifest.
	platform:: cachedPlatform.
	args:: {}.
	thread:: platform mirrors ActivationMirror invokeSuspended:
		[(appConfig packageUsing: manifest) main: AppPlatform new args: args].
	paused ifFalse: [thread resume].
	thread isFulfilled ifFalse:
		[enterSubject:: ide debugging ThreadSubject onModel: thread].
)
respondToRunTests = (
	| thread |
	thread:: cachedPlatform mirrors ActivationMirror invokeSuspended:
		[enterSubject:: subject testingSubject].
    thread resume.
	thread isFulfilled
       ifFalse:
		[enterSubject:: ide debugging ThreadSubject onModel: thread].
)
respondToShowTests = (
	| thread |
	thread:: cachedPlatform mirrors ActivationMirror invokeSuspended:
		[enterSubject:: subject inactiveTestingSubject].
    thread resume.
	thread isFulfilled
       ifFalse:
		[enterSubject:: ide debugging ThreadSubject onModel: thread].
)
public testActions = (
	subject isTestConfiguration ifFalse: [^nothing].
	^row: {
		link: '[run tests]' action: [respondToRunTests].
		link: '[show tests]' action: [respondToShowTests]}.
)
public runAppAction = (
	subject isApplicationConfiguration ifFalse: [^nothing].
    ^row: {
			link: '[run]' action: [respondToRunApp: false].
			link: '[debug]' action: [respondToRunApp: true].
		}
)
public editDeploymentsAction = (
| DeploymentConfigurationSubject = ide deployment DeploymentConfigurationSubject. |
	subject isApplicationConfiguration ifFalse: [^nothing].
	^link: '[configurations]' action: [
			openMenu:: menuWithLabelsAndActions:
               ((ide deployment configurations) collect: [:dc <DeploymentConfiguration> |
                   {dc name. [enterSubject:: DeploymentConfigurationSubject onModel: dc]}]),
                {{'Create New Deployment'. [enterSubject:: DeploymentConfigurationSubject onModel: ide deployment defaultConfiguration]}}
		]
)
public deployAction = (
	subject isApplicationConfiguration ifFalse: [^nothing].
	^(link: '[deploy]' action: [
			openMenu:: menuWithLabelsAndActions: {
				{'as VictoryFuel'. [deployAsVictoryFuel]}.
				{'as VictoryFuel with Mirrors'. [deployAsVictoryFuelWithMirrors]}.
				{'as Web Page'. [deployAsWebPage]}.
				{'as Web Page with Mirror Builders'. [deployAsWebPageWithMirrorBuilders]}.
			}
		]).
)
) : (
)
public class MethodGroupUI new = (
 |
    (* Only need Subject. Can get presenter and view from it *)
    subject = MethodGroupSubject onModel: (MethodGroupModel new).

(* indented browsers *)
(* none *)
 |
) (
class MethodGroupModel new = (

) (
) : (
)
class MethodGroupSubject onModel: m = Subject onModel: m (

) (
public isMyKind: s <Subject> ^ <Boolean> = (
	^ s isKindOfMethodGroupSubject.
)
public isKindOfMethodGroupSubject = (
	^ true.
)
) : (
)
class MethodGroupPresenter onSubject: s = Presenter onSubject: s (

) (
public isMyKind: f <Fragment> ^ <Boolean> = (
	^ f isKindOfMethodGroupPresenter.
)
public isKindOfMethodGroupPresenter = (
	^ true.
)
) : (
)
) : (
)
public class NestedClassGroupUI new = (
 |
    (* Only need Subject. Can get presenter and view from it *)
    subject = NestedClassGroupSubject onModel: (NestedClassGroupModel new).

(* indented browsers *)
(* none *)
 |
) (
class NestedClassGroupModel new = (

) (
) : (
)
class NestedClassGroupSubject onModel: m = Subject onModel: m (

) (
) : (
)
class NestedClassGroupPresenter onSubject: s = Presenter onSubject: s (

) (
) : (
)
) : (
)
) : (
)
private browseClass: klass <Behavior | ClassDeclarationMirror> = (      
    |
	classOrClassDeclarationMirror = klass.
	classUI = self ClassUI forClassDefinedBy: classOrClassDeclarationMirror.
    classDeclarationMirror = classUI classDeclarationMirror.
    nestedClassesGroup = classUI nestedClassesGroup.
    |
    classDeclarationMirror name out. 
    nestedClassesGroup do: [:nestedClassDeclarationMirror | ('   ', nestedClassDeclarationMirror name) out].
    
   )
public compilationUnitFromSource: src <String> ^ <String> 
(*  :exemplar: compilationUnitFromSource: 'class Foo = ( | x = 0. |) (twiceX = (^2*x))' *)
(* copied from Browsing instance method *)
= (
	^'Newspeak3', String newline,  'Root' printString, String newline, src
)
public browseIDEClasses = (
      	(* Browse first 5 classes in IDE Root namespace. *)
          |browsedCount ::=  0.|
          	ide namespacing Root values do: [ :klass |
      		    browsedCount < 5 
                  	ifTrue: [
      	    			browsedCount: browsedCount + 1.
              
          	    		(* core *)
          				browseClassToOut: klass.
              		]
          ]
      )
private browseClassToOut: klass <Behavior | ClassDeclarationMirror> = (
	(* Browses the passed klass name and nested classes names, outputted to out. *)
    |
	classOrClassDeclarationMirror = klass.
	classUI = self ClassUI forClassDefinedBy: classOrClassDeclarationMirror.
    classDeclarationMirror = classUI classDeclarationMirror.
    nestedClassesGroup = classUI nestedClassesGroup.
    |
    classDeclarationMirror name out. 
    nestedClassesGroup do: [:nestedClassDeclarationMirror | ('   ', nestedClassDeclarationMirror name) out].
    
   )
) : (
)
