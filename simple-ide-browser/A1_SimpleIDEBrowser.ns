Newspeak3
'Root'
class A1_SimpleIDEBrowser usingPlatform: platform <Platform> webIDE: ide <HopscotchWebIDE> 
  (* :exemplar:  A1_SimpleIDEBrowser usingPlatform: platform webIDE: ide. *)
  = (
	|
    (* imports *)
    List = platform collections List.    
	ClassMirror = platform mirrors ClassMirror.
	Presenter = platform hopscotch Presenter.
    Subject = platform hopscotch Subject.
    
    (* slots *)
    ide = ide.
    classUIs <List[ClassBrowser]>
	|
  ) (
public class ClassBrowser forClass: klass <Behavior> = (
  	|
    
    (* Class slot for this browser class and all nested classes. *)
    private klass <Behavior> = klass.
    
    private ui = UI new.
    
	(* members used by multiple models in UI and it's nested classes *)
	private classMirror = (ClassMirror reflecting: klass).
    private classDeclarationMirror = classMirror mixin declaration.

    private nestedClassesGroup <MirrorGroup[ClassDeclarationMirror]> =  classMirror nestedClasses.
    private nestedClassDeclarationMirrors ::= nestedClassesGroup do: [:nestedClassDeclarationMirror | nestedClassDeclarationMirror].

    (* indented browsers *)
	factoryBrowser <FactoryBrowser>
    (* todo: finish: nestedClassesBrowsers <List[ClassBrowser]> ::= nestedClassDeclarationMirrors collect: [:nestedClassDeclarationMirror | ClassBrowser forClass: nestedClassDeclarationMirror klass]. *)
    nestedClassGroupBrowser <NestedClassGroupBrowser> 
    instanceMethodGroupBrowser <MethodGroupBrowser>
    classMethodGroupBrowser <MethodGroupBrowser>
	|
    ) (
public class UI new = (|
    (* Only need Subject. Can get presenter and view from it *)
    subject = ClassSubject onModel: (ClassModel new).
|) (
class ClassModel=() (
public className = (
	^ classDeclarationMirror name. 
)
) : (
)
public class ClassSubject onModel: model <ClassModel> = Subject onModel: model () (
public createPresenter = (
	^ ClassPresenter onSubject: self.
)
isKindOfClassSubject = (
	^ true.
)
public isMyKind: s <Subject> ^ <Boolean> = (
    ^ isKindOfClassSubject.
)
public className = (
	^ classDeclarationMirror name.
)
public initiallyExpanded = (
	(* accessed from Presenter, must be public *)
	^ false.
)
) : (
)
class ClassPresenter onSubject: subject <ClassSubject> = Presenter onSubject: subject (
	(* todo:  *)
) (
nestedClassesPresenters = (
	(* todo: use nestedClassesBrowsers to get this. *)
  ^ List new.
)
public isMyKind: f <Fragment> ^ <Boolean> = (
	^ f isKindOfClassPresenter.
)
public isKindOfClassPresenter = (
	^ true.
)
classPresentation = (
	^ label: subject className.
)
initiallyExpanded = (
	^ false.
)
public definition ^ <Fragment>  = (
	(* todo return collapsed with class label, expanded with row of nested classes definitions. *)
    
	|classAndNestedClassesPresentation|
    (* Present directory as file, followed by contents in column under the file anme. *)
    classAndNestedClassesPresentation:: List new add: classPresentation; addAll: nestedClassesPresenters.
    
    (* If collapsed (default), present a localFileName as a link; 
        	clicking the link opens this presenter' ~subject fullFilePath~ in a new page 
            by means of 
            - this FilePresenter calling ~openOnNewPage~, which:
            - creates a new ~FileSubject onModel: subject FullFilePath~, 
              and calls enterSubject on this presenter subject's fullFilePath.
            Such enterSubject: newSubject thisFullFilePath causes the previous HopscotchWindow
            be replaced with the presenter on the new subject.
    	If expanded, present  ( in the current HopscotchWindow),
        dirAndContentsPresentation - a localFileName, followed by entries.
    *)
	^ collapsed: [
    		(* keep: without filePresenterMenu - link: subject localFileName action: [openOnNewPage] *)
            row: {
            	link: subject className action: [openOnNewPage].
                filler.
                (* todo dropDownMenu: [filePresenterMenu] *)
                }               
            ]
    expanded: [
    		column: classAndNestedClassesPresentation
            ] 
    initiallyExpanded: subject initiallyExpanded.
    
    
    (* TODO : from Browsing>>ClassPresenter#definition : add the individual methods helpSection, headingDefinition, lazySlotsPresenter, nestedClassesPresenter, etc
    classActionsPresenter:: (ClassActionsPresenter onSubject: subject) elasticity: 1.
	^column: {
        helpSection.
		headingDefinition.
		lazySlotsPresenter:: subject lazySlotsSubject presenter.       
		nestedClassesPresenter:: subject nestedClassesSubject presenter. ### will be: nestedClassesGroupBrowser(slot on ClassBrowser) ui subject presenter
		instanceMethodsPresenter:: subject methodsSubject presenter. ### will be: methodGroupBrowser(slot on ClassBrowser) ui subject presenter
		classMethodsPresenter:: subject classMethodsSubject presenter.
	}
    *)

)
headingDefinition ^ <Fragment> = (
	(* todo finish *)
	^(column: {
		expanded: [expandedHeadingDefinition]
		collapsed: [classNameAndHierarchySummary].
	}) color: (Color h: 240 s: 0.05 v: 0.9).
)
helpText ^ <Fragment> = (

(* todo see Browsing>>ClassPresenter#helpText *)
  ^ampleforth: 'A class presenter for Simple IDE Browser. See  Browsing>>ClassPresenter#helpText'
)
) : (
)
) : (
)
public class MethodGroupBrowser new = (
 |
private ui = UI new.
    
(* indented browsers *)
(* none *)
 |
) (
class UI = (
) (
class MethodGroupModel new = (
	
) (
) : (
)
class MethodGroupSubject onModel: m = Subject onModel: m (
	
) (
public isMyKind: s <Subject> ^ <Boolean> = (
	^ s isKindOfMethodGroupSubject.
)
public isKindOfMethodGroupSubject = (
	^ true.
)
) : (
)
class MethodGroupPresenter onSubject: s = Presenter onSubject: s (
	
) (
public isMyKind: f <Fragment> ^ <Boolean> = (
	^ f isKindOfMethodGroupPresenter.
)
public isKindOfMethodGroupPresenter = (
	^ true.
)
) : (
)
) : (
)
) : (
)
public class NestedClassGroupBrowser new = (
 |
private ui = UI new.

(* indented browsers *)
(* none *)
 |
) (
class UI = (
) (
class NestedClassGroupModel new = (

) (
) : (
)
class NestedClassGroupSubject onModel: m = Subject onModel: m (

) (
) : (
)
class NestedClassGroupPresenter onSubject: s = Presenter onSubject: s (

) (
) : (
)
) : (
)
) : (
)
) : (
)
public browseIDEClasses = (
      	(* Browse first 5 classes in IDE Root namespace. *)
          |browsedCount ::=  0.|
          	ide namespacing Root values do: [ :klass |
      		    browsedCount < 5 
                  	ifTrue: [
      	    			browsedCount: browsedCount + 1.
              
          	    		(* core *)
          				browseClass: klass.
              		]
          ]
      )
private browseClass: klass <Behavior | ClassDeclarationMirror> = (
	(* Need to use ClassMirror to reflect klass to see anything inside, even name. *)
      
    |
    classMirror <ClassMirror> = (ClassMirror reflecting: klass).
    classDeclarationMirror <ClassDeclarationMirror>
    nestedClassesGroup <MirrorGroup[ClassDeclarationMirror]>
    |
    classDeclarationMirror::  classMirror mixin declaration.
    classDeclarationMirror name out. 
    nestedClassesGroup:: classMirror nestedClasses.
    nestedClassesGroup do: [:nestedClassDeclarationMirror | ('   ', nestedClassDeclarationMirror name) out].
    
    ^ classDeclarationMirror.
    )
private browseClassInWindow: klass <Behavior | ClassDeclarationMirror> = (
	(* Need to use ClassMirror to reflect klass to see anything inside, even name. *)
      
    |
    classMirror <ClassMirror> = (ClassMirror reflecting: klass).
    classDeclarationMirror <ClassDeclarationMirror>
    nestedClassesGroup <MirrorGroup[ClassDeclarationMirror]>
    |
    classDeclarationMirror::  classMirror mixin declaration.
    classDeclarationMirror name out. 
    nestedClassesGroup:: classMirror nestedClasses.
    nestedClassesGroup do: [:nestedClassDeclarationMirror | ('   ', nestedClassDeclarationMirror name) out].
    
    ^ classDeclarationMirror.
    )
public browseIDEClassesInWindow = (
      	(* Browse first 5 classes in IDE Root namespace. *)
          |browsedCount ::=  0.|
          	ide namespacing Root values do: [ :klass |
      		    browsedCount < 5 
                  	ifTrue: [
      	    			browsedCount: browsedCount + 1.
              
          	    		(* core *)
          				browseClass: klass.
              		]
          ]
      )
) : (
)
